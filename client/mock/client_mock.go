// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/client.go

// Package cmock is a generated GoMock package.
package cmock

import (
    reflect "reflect"
    client "terraform-provider-m3/client"

    gomock "github.com/golang/mock/gomock"
)

// MockTransporter is a mock of Transporter interface.
type MockTransporter struct {
    ctrl     *gomock.Controller
    recorder *MockTransporterMockRecorder
}

// MockTransporterMockRecorder is the mock recorder for MockTransporter.
type MockTransporterMockRecorder struct {
    mock *MockTransporter
}

// NewMockTransporter creates a new mock instance.
func NewMockTransporter(ctrl *gomock.Controller) *MockTransporter {
    mock := &MockTransporter{ctrl: ctrl}
    mock.recorder = &MockTransporterMockRecorder{mock}
    return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransporter) EXPECT() *MockTransporterMockRecorder {
    return m.recorder
}

// Do mocks base method.
func (m *MockTransporter) Do(body interface{}) (*client.M3BatchResult, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "Do", body)
    ret0, _ := ret[0].(*client.M3BatchResult)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockTransporterMockRecorder) Do(body interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTransporter)(nil).Do), body)
}

// MakePayload mocks base method.
func (m *MockTransporter) MakePayload(arg0 interface{}, arg1 string) (*client.DefaultPayload, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "MakePayload", arg0, arg1)
    ret0, _ := ret[0].(*client.DefaultPayload)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// MakePayload indicates an expected call of MakePayload.
func (mr *MockTransporterMockRecorder) MakePayload(arg0, arg1 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePayload", reflect.TypeOf((*MockTransporter)(nil).MakePayload), arg0, arg1)
}
